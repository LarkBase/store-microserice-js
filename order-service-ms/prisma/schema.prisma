generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id          String      @id @default(uuid())
  userId      String      // User placing the order
  status      OrderStatus @default(PENDING)
  totalAmount Decimal
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  items       OrderItem[]
  payment     Payment?   // ✅ Order does NOT define relation fields!
  tracking    Tracking?  // ✅ Order does NOT define relation fields!
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Payment {
  id        String        @id @default(uuid())
  orderId   String        @unique
  method    PaymentMethod
  status    PaymentStatus @default(PENDING)
  transactionId String?   @unique
  amount    Decimal       @default(0.00)
  paidAt    DateTime?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())

  order     Order         @relation(fields: [orderId], references: [id], onDelete: Cascade) // ✅ Payment holds the relation
}

model Tracking {
  id        String  @id @default(uuid())
  orderId   String  @unique
  status    String
  updatedAt DateTime @default(now())

  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade) // ✅ Tracking holds the relation
}

model Wishlist {
  id        String  @id @default(uuid())
  userId    String  // ✅ No relation, since User is in `user-service`
  productId String
  createdAt DateTime @default(now())
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  UPI
  NET_BANKING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
