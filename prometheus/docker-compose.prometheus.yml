services:
  ai-sre-service-db:
    image: postgres:17-alpine
    container_name: ai-sre-service-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ai-sre-service-ms
    ports:
      - "5456:5432"  # Changed port to avoid conflict with user-service-db
    volumes:
      - ai-sre-service-db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5
      timeout: 3s
    networks:
      - monitoring  # ✅ Connect DB to monitoring network

  ai-sre-server:
    build:
      context: ../ai-sre/server
      dockerfile: Dockerfile
    container_name: ai-sre-server
    restart: always
    environment:
      DATABASE_URL: "postgresql://postgres:postgres@ai-sre-service-db:5432/ai-sre-service-ms"
    ports:
      - "4000:4000"
    depends_on:
      ai-sre-service-db:
        condition: service_healthy
    networks:
      - monitoring

  ai-sre-client:
    build:
      context: ../ai-sre/client
      dockerfile: Dockerfile
    container_name: ai-sre-client
    restart: always
    ports:
      - "5173:5173"  # Expose Vite on 5173
    depends_on:
      - ai-sre-server
    networks:
      - monitoring

  # prometheus:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: prometheus
  #   restart: always
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml
  #   networks:
  #     - monitoring 

  # node-exporter:
  #   image: prom/node-exporter:latest
  #   container_name: node-exporter
  #   restart: always
  #   ports:
  #     - "9100:9100"
  #   networks:
  #     - monitoring 

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   restart: always
  #   ports:
  #     - "3000:3000" 
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - grafana-data:/var/lib/grafana
  #   networks:
  #     - monitoring 

networks:
  monitoring:
    external: true

volumes:
  grafana-data:
    driver: local
  ai-sre-service-db-data:
    driver: local


## docker-compose -f docker-compose.prometheus.yml up -d



#################################

## docker network create monitoring # ✅ Create the network if not exists
## docker-compose -f docker-compose-dev.yml up --build -d
## docker-compose -f docker-compose.prometheus.yml up -d

##for i in {1..15}; do curl -X POST http://localhost:5001/api/auth/login -d '{"email": "admin1@vibe.store", "password": "vibe@123"}' -H "Content-Type: application/json"; done